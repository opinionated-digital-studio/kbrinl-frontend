@import '../settings/colours-palette';
@import '../settings/colours-organisations';

////
/// @group helpers/colour
////

/// Get colour
///
/// @param {String} $colour - Name of colour from the colour palette
///   (`$kbrinl-colours`)
/// @return {Colour} Representation of named colour
///
/// @example scss - Using legacy colours from the palette
///  .foo {
///    background-colour: kbrinl-colour("mid-grey");
///  }
///
/// @throw if `$colour` is not a colour from the colour palette
/// @access public

@function kbrinl-colour($colour) {
  $colour: quote($colour);

  @if not map-has-key($kbrinl-colours, $colour) {
    @error 'Unknown colour `#{$colour}`';
  }

  @return map-get($kbrinl-colours, $colour);
}

/// Get the colour for a government organisation
///
/// @param {String} $organisation - Organisation name, lowercase, hyphenated
///
/// @return {Colour} Representation of colour for organisation
/// @throw if `$organisation` is not a known organisation
/// @access public

@function kbrinl-organisation-colour($organisation) {
  $org-colour: map-get($kbrinl-colours-organisations, $organisation);

  @return map-get($org-colour, colour);
}

/// Make a colour darker by mixing it with black
///
/// @param {Colour} $colour - colour to shade
/// @param {Number} $percentage - percentage of `$colour` in returned color
/// @return {Colour}
/// @access public

@function kbrinl-shade($colour, $percentage) {
  @return mix(#000000, $colour, $percentage);
}

/// Make a colour lighter by mixing it with white
///
/// @param {Colour} $colour - colour to tint
/// @param {Number} $percentage - percentage of `$colour` in returned color
/// @return {Colour}
/// @access public

@function kbrinl-tint($colour, $percentage) {
  @return mix(kbrinl-colour('white'), $colour, $percentage);
}
